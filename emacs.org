#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.vmacs.d/init.el
* Info
** Colemake Strategy
Use neio for movement.
- h gets i (insert)
- k gets o (open)
- j gets n (search)
- l gets e (word end)
 
I chose these based on my usage frequency and ease of use.

Keys like gj and gk that use movement key semantics should be swapped for colemak movement keys

h needs to replace i in text object otherwise I can't cast line up in visual mode.
** Todo
- More snipets
- More org mode
- More language support
  - [ ] Ruby
  - [ ] C
  - [ ] switch from tide to lsp
- Special bindings for modes:
  - [ ] Dired
  - [ ] Flychecker
- General keybinds
  - Smartparens
    - Forward/Backward Slurp/Barf
- Possibly an evil colemak overlay mode instead of messing directly with maps.
- Change the behavior of reference popup buffers.
- Make =C-i= jump forward, switch =C-w= dir keybinds to colemak.
- One button maps for frequently used emacs keybinds.
  - =M-x=
  - =C-x b=
* Initial setup
*** Guix Manifest
Build with
#+BEGIN_SRC sh
  guix package -m "~/dotfiles/guix-manifests/emacs.scm" -p "~/.guix-extra-profiles/emacs/emacs"
#+END_SRC

Marking guile blocks as lisp instead of scheme so geiser will shutup.
#+BEGIN_SRC lisp :tangle ~/dotfiles/guix-manifests/emacs.scm :noweb yes
  ;; -*- geiser-scheme-implementation: guile -*-
  (specifications->manifest
   '("emacs"
     "libcanberra"
     "freetype"
     "fontconfig"
     "emacs-aio"
     "emacs-request"
     <<packages>>
     ))
     #+END_SRC
*** Set paths
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.vmacs.d/lisp/")
  (setq org-directory "~/org/")
#+END_SRC
*** Use utf-8
#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8-unix)
  (setq coding-system-for-read 'utf-8)
  (setq coding-system-for-write 'utf-8)
#+END_SRC
*** Make tab and C-i read as seperate keys
#+BEGIN_SRC emacs-lisp
  (define-key input-decode-map [?\C-i] [C-i])
#+END_SRC
*** Start the emacs server
#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC

*** Core Packages
Packages needed for this config
*Guix Packages*
#+BEGIN_SRC lisp :noweb-ref packages
  "emacs-general"
  "emacs-diminish"
#+END_SRC
**** General
#+BEGIN_SRC emacs-lisp
  (require 'general)
#+END_SRC
**** Dimnish
#+BEGIN_SRC emacs-lisp
  (require 'diminish)
#+END_SRC
* Functions
** Config file macros
*** Modeify
#+BEGIN_SRC emacs-lisp
  (defun modeify (symbol)
    (intern (concat (symbol-name symbol) "-mode")))
#+END_SRC
*** Interactive lambda
#+BEGIN_SRC emacs-lisp
  (defmacro i-lambda (symbol)
    `(lambda () (interactive) ,symbol))
#+END_SRC
*** require-md
Require symbol, activate and diminish its mode at symbol-mode
#+BEGIN_SRC emacs-lisp
  (defmacro require-md (symbol)
    (let ((mode (modeify symbol)))
      `(progn (require ',symbol)
              (,mode 1)
              (diminish ',mode))))
#+END_SRC
*** require-d
Require symbol and diminish its mode
#+BEGIN_SRC emacs-lisp
  (defmacro require-d (symbol)
    (let ((mode (modeify symbol)))
      `(progn (require ',symbol)
              (diminish ',mode))))
#+END_SRC
** Interactvie Functions
**** Toggle Transparency
taken from emacs wiki
#+BEGIN_SRC emacs-lisp
  (defun ne/toggle-transparency ()
    (interactive)
    (let ((alpha (frame-parameter nil 'alpha)))
      (set-frame-parameter
       nil 'alpha
       (if (eql (cond ((numberp alpha) alpha)
                      ((numberp (cdr alpha)) (cdr alpha))
                      ;; Also handle undocumented (<active> <inactive>) form.
                      ((numberp (cadr alpha)) (cadr alpha)))
                100)
           `(,alpha-focused . ,alpha-unfocused) '(100 . 100)))))
#+END_SRC
**** Centered mode
#+BEGIN_SRC emacs-lisp
  (setq ne/visual-center-mode-width 100)
  (define-minor-mode ne/visual-center-mode
    "Use `visual-fill-mode' to center text"
    :init-value nil :lighter nil :global nil
    (if ne/visual-center-mode
        (progn 
          (setq visual-fill-column-width ne/visual-center-mode-width)
          (setq visual-fill-column-center-text t)
          (visual-fill-column-mode 1))
      (progn
        (setq visual-fill-column-width nil)
        (setq visual-fill-column-center-text nil)
        (visual-fill-column-mode 0))))

  (defun ne/visual-center (&optional ARG)
    (interactive)
    (if visual-fill-column-mode 
        (visual-fill-column-mode 0)
      (progn 
        (setq visual-fill-column-width 150)
        (setq visual-fill-column-center-text t)
        (visual-fill-column-mode 1))))
#+END_SRC
**** Guix channel automation
- TODO: Make it work for non-git sources
#+BEGIN_SRC emacs-lisp
  (defun ne/sexp-pair-regex (name)
    (concat "(" name "[[:space:]\n\r]*\"\\(.*\\)\")"))

  (defun ne/git-hash (url commit)
    (let* ((odir (cadr (split-string (pwd))))
           (dir (file-name-sans-extension (car (last (split-string url "/"))))))
      (delete-directory dir t)
      (shell-command (concat "git clone " url))
      (cd dir)
      (shell-command (concat "git checkout -q " commit))
      (prog1
          (string-trim-right (shell-command-to-string "guix hash -rx ."))
        (delete-directory dir t)
        (cd odir))))

  (defun ne/guix-hash-at-point ()
    (interactive)
    (save-excursion
      (save-match-data
        (narrow-to-defun)
        (goto-char (point-min))
        (re-search-forward (sexp-pair-regex "url"))
        (goto-char (point-min))
        (let ((url (match-string 1)))
          (re-search-forward (sexp-pair-regex "commit"))
          (let* ((commit (match-string 1))
                 (hash (ne/git-hash url commit)))
            (re-search-forward (sexp-pair-regex "base32"))
            (replace-match hash t nil nil 1)))
        (widen))))

  (defun ne/guix-bump-at-point (commit)
    (interactive "sCommit: ")
    (save-excursion
      (save-match-data
        (narrow-to-defun)
        (goto-char (point-min))

        (re-search-forward (sexp-pair-regex "version"))
        (re-search-backward "\\.\\(.*\\)\"")
        (let ((new-version (number-to-string (1+ (string-to-number (match-string 1))))))
          (replace-match new-version t nil nil 1))

        (re-search-forward (sexp-pair-regex "commit"))
        (replace-match commit t nil nil 1)

        (ne/guix-hash-at-point)
        (widen))))

  (defun ne/guix-bump-current-project ()
    (interactive)
    (let ((name (projectile-project-name))
          (commit (replace-regexp-in-string "\n\\'" "" 
                                            (shell-command-to-string "git rev-parse HEAD"))))
      (shell-command "git rev-parse HEAD")
      (with-current-buffer (find-file "/home/clone/projects/guix-channel/clone.scm")
        (save-excursion
          (goto-char (point-min))
          (search-forward (concat "define-public " name))
          (message "bCommit: %s" commit)
          (ne/guix-bump-at-point commit)
          (save-buffer)
          (magit-stage-file (magit-file-relative-name))
          (magit-commit-create (list (concat "-m Bumped " name)))))))
#+END_SRC
** Kmacros
#+BEGIN_SRC emacs-lisp
  (fset 'quote-word
        (kmacro-lambda-form [?y ?s ?h ?w ?\"] 0 "%d"))
  (fset 'surround-sexp
        (kmacro-lambda-form [?y ?s ?a ?\) ?\)] 0 "%d"))
#+END_SRC
** Variables
*** Solarized colors
#+BEGIN_SRC emacs-lisp
  (setq s_base03 "#002b36")
  (setq s_base02 "#073642")
  (setq s_base01 "#586e75")
  (setq s_base00 "#657b83")
  (setq s_base0 "#839496")
  (setq s_base1 "#93a1a1")
  (setq s_base2 "#eee8d5")
  (setq s_base3 "#fdf6e3")
  (setq s_yellow "#b58900")
  (setq s_orange "#cb4b16")
  (setq s_red "#dc322f")
  (setq s_magenta "#d33682")
  (setq s_violet "#6c71c4")
  (setq s_blue "#268bd2")
  (setq s_cyan "#2aa198")
  (setq s_green "#859900")
#+END_SRC
* Exwm
*Guix Packages*
#+BEGIN_SRC lisp :noweb-ref packages
  "emacs-exwm"
  "emacs-dmenu"
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (require 'exwm)
  ;; (require 'exwm-config)
  ;; (exwm-config-default)
  ;; (general-define-key :keymaps 'override
  ;;                     "s-d" (i-lambda '(shell-command "firefox")))
#+END_SRC
** Keybinds
*** General
*** Shortcuts
** Dmenu
#+BEGIN_SRC emacs-lisp
  (require 'dmenu)
#+END_SRC
* General Config
** Relative Line Numbers
#+BEGIN_SRC emacs-lisp
  (setq display-line-numbers-type 'relative)
  (setq-default display-line-numbers-width 4)
  (dolist (mode '(prog-mode-hook
                  text-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))
#+END_SRC
** Use spaces
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC
** Buffer behavior
#+BEGIN_SRC emacs-lisp
  (setq display-buffer-alist '(("^\\*Async Shell Command\\*$"
                                (display-buffer-reuse-window
                                 display-buffer-in-side-window)
                                (reusable-frames . visible)
                                (side . bottom))))
#+END_SRC
** File hooks
*** Helper
#+BEGIN_SRC emacs-lisp
  (defun save-hook-for-file (file cmd)
    (when (equal (buffer-file-name) file)
      (async-shell-command cmd)))
#+END_SRC
*** Hooks
May want this again later but for now <leader> r p to relaod

#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'after-save-hook
  ;;           (lambda ()
  ;;             (save-hook-for-file "~/dotfiles/guix-manifests/emacs.scm"
  ;;                                 "guix package -m \
  ;;                                     ~/dotfiles/guix-manifests/emacs.scm \
  ;;                                     -p \
  ;;                                     ~/.guix-extra-profiles/emacs/emacs")))
#+END_SRC

** Use backup folder
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.backup")))
#+END_SRC
** Don't use lock files
Lock files confuse npm start
#+BEGIN_SRC emacs-lisp
  (setq create-lockfiles nil)
#+END_SRC
* UI
*Guix Packages*
#+BEGIN_SRC lisp :noweb-ref packages
  "emacs-doom-themes"
  "emacs-counsel" ;; Contains ivy
  "emacs-ivy-rich"
  "emacs-ivy-pass"
  "emacs-auth-source-pass"

  "emacs-which-key"

  "emacs-neotree"

  "emacs-powerline"
  "emacs-airline-themes" ;; Not in guix yet

  "emacs-dashboard"

  "emacs-all-the-icons"
  "emacs-hl-todo"

  "emacs-visual-fill-column"
#+END_SRC
** Apperance
*** Remove ui decorations
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (menu-bar-mode -1)            ; Disable the menu bar
#+END_SRC
*** Theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'doom-solarized-dark t)
#+END_SRC
*** Font
#+BEGIN_SRC emacs-lisp
  (setq frame-inhibit-implied-resize t)
  (set-face-attribute 'default nil :font "Fira Code" :height 90)
#+END_SRC
*** All the icons
#+BEGIN_SRC emacs-lisp
  (require 'all-the-icons)
#+END_SRC
*** Modeline
#+BEGIN_SRC emacs-lisp
  (require 'powerline)
  (powerline-vim-theme)

  (require 'airline-themes)
  (setq airline-eshell-colors t)
  (load-theme 'airline-solarized t)

#+END_SRC
** Tweaks
*** Inhibit startup
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
*** Highlight current line
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'hl-line-mode)
#+END_SRC
*** Y or n
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Transparancy
Taken from emacs wiki
#+BEGIN_SRC emacs-lisp
  (defvar alpha-focused 95)
  (defvar alpha-unfocused 90)
  (set-frame-parameter (selected-frame) 'alpha (cons alpha-focused
                                                     alpha-unfocused))
  (add-to-list 'default-frame-alist `(alpha . (,alpha-focused . ,alpha-unfocused)))
#+END_SRC
*** Disable tab bar buttons
#+BEGIN_SRC emacs-lisp
  (setq tab-bar-new-button-show nil)
  (setq tab-bar-close-button nil)
#+END_SRC
*** Don't blink the cursor
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode 0)
#+END_SRC
** Ivy
#+BEGIN_SRC emacs-lisp
  (require-md ivy)

  (setq ivy-use-virtual-buffers t)
  (require-md counsel)
  (setcdr (assq 'counsel-M-x ivy-initial-inputs-alist) "")

  (general-define-key :map 'ivy-mode-map
                      "C-x b" #'persp-ivy-switch-buffer)
#+END_SRC
*** Ivy addons
**** Ivy rich
#+BEGIN_SRC emacs-lisp
  (require-md ivy-rich)
#+END_SRC
** Neotree
TODO: keybindings
#+BEGIN_SRC emacs-lisp
  (require 'neotree)
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  (setq neo-autorefresh nil)
  (add-hook 'neo-after-create-hook
            (lambda (_) (display-line-numbers-mode 0)))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun ne/neotree-refresh-toggle ()
    (interactive)
    (if (neo-global--window-exists-p)
        (neotree-hide)
      (progn 
        (neotree-show)
        (neotree-refresh))))

  (setq _last_neo_dir nil)
  (defun ne/neotree-show-project ()
    (interactive)
    (let ((proot (projectile-project-root)))
      (if (and (neo-global--window-exists-p) (string= _last_neo_dir proot))
          (neotree-hide)
        (progn 
          (setq _last_neo_dir proot)
          (neotree-dir proot)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :noweb-ref leader-key
  "n" #'ne/neotree-show-project
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
  (require-md which-key)
  (setq which-key-idle-delay 1.5)
#+END_SRC
** Helful  
#+BEGIN_SRC emacs-lisp
  (require 'helpful)

  (global-set-key (kbd "C-h f") #'helpful-callable)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)
#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
  (require 'dashboard)
  (setq dashboard-banner-logo-title "Welcome to Emacs Dashboard")
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
  ;;(dashboard-setup-startup-hook)
  (setq dashboard-startup-banner "~/Pictures/emacs_banner.png")
#+END_SRC
Dashboard doesn't activate itself if emacs is started with command line arguments, and I pass args for chemacs,
So it must be manually activated
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook (lambda ()
                               ;; Display useful lists of items
                               (dashboard-insert-startupify-lists)))
  (add-hook 'emacs-startup-hook '(lambda ()
                                   (switch-to-buffer dashboard-buffer-name)
                                   (goto-char (point-min))
                                   (redisplay)
                                   (run-hooks 'dashboard-after-initialize-hook)))
#+END_SRC

* General Additions
Random packages that are useful in several modes
*Guix Packages*
#+BEGIN_SRC lisp :noweb-ref packages

  "emacs-vterm"
  ;; Vterm deps
  "cmake"
  "make"
  "libvterm"

  "emacs-rainbow-mode"
  "emacs-rainbow-delimiters"
  "emacs-smartparens"
  "emacs-helpful"
  "emacs-avy"

  "emacs-perspective"
#+END_SRC
** Prog mode
*** Smartparens
#+BEGIN_SRC emacs-lisp
  (require-d smartparens)
  (require 'smartparens-config)

  (smartparens-global-mode)
#+END_SRC
*** Paran matching
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'show-paren-mode)
  (require 'general)
#+END_SRC
*** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
  (require-d rainbow-delimiters)
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+END_SRC
*** Rainbow Mode
#+BEGIN_SRC emacs-lisp
  (require 'rainbow-mode)
  (dolist (mode-hook '(web-mode-hook css-mode-hook tide-mode-hook))
    (add-hook mode-hook #'rainbow-mode))
#+END_SRC
*** HL todo
#+BEGIN_SRC emacs-lisp
  (require 'hl-todo)
  (global-hl-todo-mode 1)
#+END_SRC

Taken from DOOM emacs
#+BEGIN_SRC emacs-lisp
  (setq hl-todo-highlight-punctuation ":")
  (setq hl-todo-keyword-faces 
        `(("TODO" warning bold)
          ("FIXME" error bold)
          ("HACK" font-lock-constant-face bold)
          ("REVIEW" font-lock-keyword-face bold)
          ("NOTE" success bold)
          ("DEPRECATED" font-lock-doc-face bold)
          ("BUG" error bold)
          ("XXX" font-lock-constant-face bold)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'show-paren-mode)
#+END_SRC
*** Eldoc
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'eldoc-mode)
#+END_SRC
*** Git gutter
*Guix Packages*
#+BEGIN_SRC lisp :noweb-ref packages
  "emacs-git-gutter"
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (require-d git-gutter)
  (global-git-gutter-mode +1)
#+END_SRC
*** Avy
#+BEGIN_SRC emacs-lisp
  (require 'avy)
#+END_SRC
#+BEGIN_SRC emacs-lisp :noweb-ref leader-key
  "m" #'evil-avy-goto-char-2
#+END_SRC

** Visual Fill column
#+BEGIN_SRC emacs-lisp
  (require 'visual-fill-column)
  (setq visual-fill-column-width 150)
  (setq visual-fill-column-center-text t)
#+END_SRC

** Perspectives
#+BEGIN_SRC emacs-lisp
  (require 'perspective)
  (diminish 'persp-mode)
  (persp-mode)
#+END_SRC

Share some buffers across all perspectives
#+BEGIN_SRC emacs-lisp
  (setq persp-shared-buffs '("*Messages*" "*Backtrace*" "emacs.org" "*dashboard*"))
  (add-hook 'persp-switch-hook
            (lambda ()
              (dolist (buff persp-shared-buffs) 
                (persp-add-buffer buff))))

  (add-hook 'persp-created-hook
            (lambda () (switch-to-buffer "*dashboard*")))
#+END_SRC
* Org
*Guix Packages*
#+BEGIN_SRC lisp :noweb-ref packages
  "emacs-org"
  "emacs-org-journal"
  "emacs-org-roam"
  "emacs-toc-org"
  "emacs-org-superstar"
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'org)
  (add-hook 'org-mode-hook
            (lambda ()
              (org-indent-mode)
              (diminish 'org-indent-mode)
              (ne/visual-center-mode)))
  (add-to-list 'org-agenda-files "~/org/")
#+END_SRC

Tangle on save
#+BEGIN_SRC emacs-lisp
  (defun ne/org-babel-tangle-dont-ask ()
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle)))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'ne/org-babel-tangle-dont-ask
                                                'run-at-end 'only-in-org-mode)))
#+END_SRC
TOC
#+BEGIN_SRC emacs-lisp
  (require 'toc-org)
  (add-hook 'org-mode-hook 'toc-org-mode)
#+END_SRC

Super star
#+BEGIN_SRC emacs-lisp
  (require 'org-superstar)
  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
  (setq org-superstar-leading-bullet " ")
#+END_SRC

Load babel languages
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (scheme . t)
     (python . t)))
#+END_SRC
** Additions
*Guix Packages*
#+BEGIN_SRC lisp :noweb-ref packages
  "emacs-anki-editor"
#+END_SRC
*** Anki editor
#+BEGIN_SRC emacs-lisp
  (require 'anki-editor)
#+END_SRC
* IDE
** General
#+BEGIN_SRC emacs-lisp :noweb-ref packages
  "emacs-company"

  "emacs-flycheck"
  "emacs-flycheck-guile"


  "emacs-yasnippet"
  "emacs-yasnippet-snippets"
  "emacs-ivy-yasnippet"

  "emacs-projectile"
  "emacs-magit"
  "emacs-counsel-projectile"

  "emacs-lsp-mode"
  "emacs-lsp-ui"
  "emacs-lsp-ivy"
#+end_src
*** Company
*packages*
#+begin_src emacs-lisp

  (setq company-idle-delay 0.0)
  (require-md company)
  (add-hook 'after-init-hook 'global-company-mode)
#+end_src
*** flycheck
#+begin_src emacs-lisp
  (require 'flycheck)
  ;;(global-flycheck-mode)
  (diminish 'flycheck-mode)

  (require 'flycheck-guile)
#+end_src
*** yasnippet
#+begin_src emacs-lisp
  (require 'yasnippet)
  (require 'ivy-yasnippet)
  (diminish 'yas-minor-mode)
  (yas-global-mode 1)
#+end_src
enter insert mode on snippet insert
#+begin_src emacs-lisp
  (advice-add #'ivy-yasnippet :after #'evil-insert-state)
#+end_src

#+begin_src emacs-lisp :noweb-ref leader-key
  "i" #'ivy-yasnippet
#+end_SRC

Use guix snippets
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'yasnippet
    (add-to-list 'yas-snippet-dirs "~/builds/guix/etc/snippets"))
#+END_SRC

*** Projectile
#+BEGIN_SRC emacs-lisp
  (require-md projectile)
  (require-md counsel-projectile)
#+END_SRC

Bind projectile commands to leader p
#+BEGIN_SRC emacs-lisp :noweb-ref leader-key
  "p" 'projectile-command-map
#+END_SRC
*** Magit
#+BEGIN_SRC emacs-lisp
  (require 'magit)

  ;; (general-define-key :keymaps 'magit-mode-map
  ;;                     "e" #'magit-section-forward
  ;;                     "i" #'magit-section-backward
  ;;                     "n" #'magit-ediff-dwim
  ;;                     "p" #'magit-gitignore)
#+END_SRC

#+BEGIN_SRC emacs-lisp :noweb-ref leader-key
  "am" #'magit-status
#+END_SRC
*** LSP
#+BEGIN_SRC emacs-lisp
  (require 'lsp-mode)
  (require 'lsp-clients)

  (require-d lsp-ui)
  (add-hook 'prog-mode-hook #'lsp-ui-mode)
  (add-hook 'prog-mode-hook #'eldoc-mode)

  ;; (general-define-key :keymaps 'lsp-mode-map :states 'normal
  ;;                     "I" #'lsp-find-definition)

  (require 'lsp-ivy)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (general-define-key :states 'normal :keymaps 'lsp-ui-mode-map
                      "gh" #'lsp-ui-doc-glance
                      "gd" #'lsp-ui-peek-find-definitions
                      "gr" #'lsp-ui-peek-find-references)

  (general-define-key :keymaps 'lsp-ui-peek-mode-map
                      "n" #'lsp-ui-peek--select-prev-file
                      "e" #'lsp-ui-peek--select-next
                      "i" #'lsp-ui-peek--select-prev
                      "o" #'lsp-ui-peek--select-next-file
                      "k" #'lsp-ui-peek--goto-xref
                      "K" #'lsp-ui-peek--goto-xref-other-window)
#+END_SRC
** Langs
TODO: defer loading
*** Lisp
*Guix Packages*
#+BEGIN_SRC lisp :noweb-ref packages
  "emacs-eros"
#+END_SRC
  
#+BEGIN_SRC emacs-lisp
  (require 'eros)
  (eros-mode 1)
#+END_SRC
*** Scheme
*Guix Packages*
#+BEGIN_SRC lisp :noweb-ref packages
  "emacs-geiser"
  "mit-scheme"
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'xscheme)
  (require 'geiser)
  (with-eval-after-load 'geiser-guile
    (add-to-list 'geiser-guile-load-path "~/.guix-profile/share/guile/site/3.0/")
    (add-to-list 'geiser-guile-load-path "~/builds/guix"))

#+END_SRC
*** Python
*Packages*
#+BEGIN_SRC emacs-lisp :noweb-ref packages
  "python-language-server"
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook #'lsp)
#+END_SRC

*** Rust
*Guix Packages*
#+BEGIN_SRC lisp :noweb-ref packages
  "emacs-rust-mode"
  "emacs-flycheck-rust"
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (autoload 'rust-mode "rust-mode" nil t)
  (add-hook 'rust-mode-hook #'lsp)
#+END_SRC

*** Shell
*Guix Packages*
#+BEGIN_SRC lisp :noweb-ref packages
  "shellcheck"
#+END_SRC

*** Hoon
#+BEGIN_SRC emacs-lisp
  (require 'hoon-mode)
#+END_SRC
*** Web
*Guix Packages*
#+BEGIN_SRC lisp :noweb-ref packages
  "emacs-web-mode"
  "emacs-skewer-mode"
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))

  ;;(require 'skewer-mode)
  ;;(add-hook 'html-mode-hook 'skewer-html-mode)
#+END_SRC

**** Javascript

#+BEGIN_SRC lisp :noweb-ref packages
  "emacs-nodejs-repl"
  "emacs-tide"
  "emacs-rjsx-mode"
  "emacs-npm-mode"
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)
#+END_SRC
***** Node repl
#+BEGIN_SRC emacs-lisp
  (require 'nodejs-repl)
  (general-define-key :states '(normal insert) :keymaps '(typescript-mode-map tide-mode-map)
                      "C-x C-e" #'nodejs-repl-send-last-expression)
#+END_SRC

***** Tide
#+BEGIN_SRC emacs-lisp
  (require 'tide)
  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (tide-hl-identifier-mode +1)
    (setq flycheck-check-syntax-automatically '(save new-line mode-enabled))


    (eldoc-mode +1)
    (company-mode +1))

  ;; aligns annotation to the right hand side
  (setq company-tooltip-align-annotations t)

  ;; Use global tsserver executable
  (setq tide-tsserver-executable "~/.npm/bin/tsserver")

  ;; formats the buffer before saving
  (add-hook 'before-save-hook 'tide-format-before-save)

  (add-hook 'typescript-mode-hook #'setup-tide-mode)
#+END_SRC
***** [TJ]sx
#+BEGIN_SRC emacs-lisp
  (require 'rjsx-mode)
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . rjsx-mode))
  (add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode))
  ;;(add-hook 'rjsx-mode-hook #'setup-tide-mode)
#+END_SRC
***** NPM
#+BEGIN_SRC emacs-lisp
  (require 'npm-mode)
  (diminish 'npm-mode)
  (add-hook 'rjsx-mode-hook #'npm-mode)
#+END_SRC
*** Lua
*Guix Packages*
#+BEGIN_SRC lisp :noweb-ref packages
  "emacs-lua-mode"
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'lua-mode)
#+END_SRC
 
*** C/C++
#+BEGIN_SRC emacs-lisp
  ;;(add-hook 'c++-mode-hook #'lsp)
#+END_SRC

* Evil
*Guix Packages*
#+BEGIN_SRC lisp :noweb-ref packages
  "emacs-evil"
  "emacs-evil-org"
  "emacs-evil-smartparens"
  "emacs-evil-collection"
  "emacs-evil-surround"
  "emacs-evil-leader"
  "emacs-evil-escape"
#+END_SRC
** General
*** Disabled modes
Don't enable evil in these modes
#+BEGIN_SRC emacs-lisp
  (setq evil-disabled-modes '());;'(vterm eshell))
#+END_SRC
** Evil
*** Package
TODO: Orgaize keymap
#+BEGIN_SRC emacs-lisp
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (require-md evil)
  (dolist (mode evil-disabled-modes)
    (evil-set-initial-state (modeify mode) 'emacs))
#+END_SRC
*** Keybinds
Maybe this should be and evil-colemak layer
#+BEGIN_SRC emacs-lisp
  (general-define-key :states '(normal visual operator)
                      "n" nil
                      "N" nil
                      "e" nil
                      "i" nil
                      "o" nil
                      "O" nil)

  (general-define-key :states 'motion
                      "l" #'evil-forward-word-end
                      "L" #'evil-forward-WORD-end
                      "n" #'evil-backward-char
                      "N" #'evil-window-top
                      "e" #'evil-next-line
                      "i" #'evil-previous-line
                      "o" #'evil-forward-char
                      "O" #'evil-window-bottom
                      "TAB" nil
                      "<C-i>" #'evil-jump-forward)

  (general-define-key :states 'normal
                      "E" #'evil-join
                      "I" #'lsp-find-definition
                      "h" #'evil-insert
                      "H" #'evil-insert-line
                      "j" #'evil-search-next
                      "J" #'evil-search-previous
                      "k" #'evil-open-below
                      "K" #'evil-open-above)

  (general-define-key :states '(insert opertor visual replace)
                      "C-h" #'evil-normal-state)

  (general-define-key :states '(visual operator)
                      "h" evil-inner-text-objects-map)

  (general-define-key :states 'normal
                      :keymaps 'override
                      "gt" #'tab-bar-switch-to-next-tab
                      "gT" #'tab-bar-switch-to-prev-tab)

#+END_SRC
**** Window
#+BEGIN_SRC emacs-lisp
  (evil-collection-translate-key nil 'evil-window-map
    "n" "h"
    "e" "j"
    "i" "k"
    "o" "l"

    "h" "i"
    "j" "n"
    "k" "o"
    "l" "e"

    "N" "H"
    "E" "J"
    "I" "K"
    "O" "L"

    "H" "I"
    "J" "N"
    "K" "O"
    "L" "E")
#+END_SRC
****** Old
#+BEGIN_SRC emacs-lisp
  ;; (general-define-key :states '(normal insert)
  ;;                     :keymaps 'override
  ;;                     "<C-i> C-n" #'evil-window-left
  ;;                     "<C-i> n" #'evil-window-left
  ;;                     "<C-i> C-e" #'evil-window-down
  ;;                     "<C-i> e" #'evil-window-down
  ;;                     "<C-i> <C-i>" #'evil-window-up
  ;;                     "<C-i> i" #'evil-window-up
  ;;                     "<C-i> C-o" #'evil-window-right
  ;;                     "<C-i> o" #'evil-window-right)
  ;; (general-define-key :keymaps 'override
  ;;                     "<C-i> C-n" #'evil-window-left
  ;;                     "<C-i> n" #'evil-window-left
  ;;                     "<C-i> C-e" #'evil-window-down
  ;;                     "<C-i> e" #'evil-window-down
  ;;                     "<C-i> <C-i>" #'evil-window-up
  ;;                     "<C-i> i" #'evil-window-up
  ;;                     "<C-i> C-o" #'evil-window-right
  ;;                     "<C-i> o" #'evil-window-right)
#+END_SRC


** Org
The keys must be defined in the hook or they will be overwritten by evil-mode. "gi" must be defined because evil mode was overwriting the motion.
Text objects are defined from scratch instead of setting them in the theme because I need to move from i to h.
*** Package
TODO: defer
#+BEGIN_SRC emacs-lisp
  (setq evil-org-movement-bindings '((left . "n") (down . "e") (up . "i") (right . "o")))
  (require-d evil-org)
  (add-hook 'org-mode-hook 'evil-org-mode)
#+END_SRC
*** Keybinds
Start hook block
#+BEGIN_SRC emacs-lisp
  (add-hook 'evil-org-mode-hook (lambda ()
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (evil-org-set-key-theme '(navigation insert))
#+END_SRC

Colemak fixes
#+BEGIN_SRC emacs-lisp
  (general-define-key :states 'normal :keymaps 'evil-org-mode-map
                      "gi" #'org-backward-element
                      "i" nil
                      "o" nil
                      "O" nil
                      "I" nil
                      "H" #'evil-org-insert-line
                      "k" #'evil-org-open-below
                      "K" #'evil-org-open-above)

#+END_SRC

Manually add text operaters because it's easier than rebinding them
#+BEGIN_SRC emacs-lisp
  (general-define-key :states '(operator visual) :keymaps 'evil-org-mode-map
                      "he" #'evil-org-inner-object
                      "hE" #'evil-org-inner-element
                      "hr" #'evil-org-inner-greater-element
                      "hR" #'evil-org-inner-subtree
                      "ae" #'evil-org-an-object
                      "aE" #'evil-org-an-element
                      "ar" #'evil-org-an-greater-element
                      "aR" #'evil-org-an-subtree)
#+END_SRC

Additions
#+BEGIN_SRC emacs-lisp
  (general-define-key :states 'normal :keymaps 'evil-org-mode-map
                      "X" #'org-toggle-checkbox)
#+END_SRC

End hook block
#+BEGIN_SRC emacs-lisp
  ))
#+END_SRC
** Leader
TODO: Just use general instead of bringing in evil-leader
#+BEGIN_SRC emacs-lisp :noweb yes
  (require 'evil-leader)
  (global-evil-leader-mode)
  (evil-leader/set-leader ",")
  (evil-leader/set-key
    "l" #'comment-region
    "u" #'uncomment-region
    "s" #'sp-forward-slurp-sexp
    "q" #'quote-word
    "rp" (i-lambda (async-shell-command "guix package -m /home/clone/dotfiles/guix-manifests/emacs.scm -p /home/clone/.guix-extra-profiles/emacs/emacs"))
    "tn" (i-lambda (switch-to-buffer-other-tab "*dashboard*"))
    "tc" #'tab-bar-close-tab
    "tm" #'tab-bar-move-tab
    "ts" #'tab-bar-switch-to-tab
    "w" #'surround-sexp
    "c" #'evil-ex-nohighlight
    ",t" #'ne/toggle-transparency
    "v" #'evil-window-vsplit
    "h" #'evil-window-split
    "av" #'vterm
    <<leader-key>>)
#+END_SRC
** Escape
#+BEGIN_SRC emacs-lisp
  (require-md evil-escape)
  (global-set-key (kbd "<escape>") 'evil-escape)
#+END_SRC
** Collection
#+BEGIN_SRC emacs-lisp
  (require 'evil-collection)

  (dolist (mode evil-disabled-modes)
    (delete mode evil-collection-mode-list))

  (defun my-hjkl-rotation (_mode mode-keymaps &rest _rest)
    (evil-collection-translate-key 'visual mode-keymaps
      "n" "h"
      "e" "j"
      "i" "k"
      "o" "l")

    (evil-collection-translate-key 'normal mode-keymaps
      "n" "h"
      "e" "j"
      "i" "k"
      "o" "l"

      "h" "i"
      "j" "n"
      "k" "o"
      "l" "e"

      "N" "H"
      "E" "J"
      "I" "K"
      "O" "L"

      "H" "I"
      "J" "N"
      "K" "O"
      "L" "E"

      "gn" "gh"
      "ge" "gj"
      "gi" "gk"
      "go" "gl"


      "gh" "gi"
      "gj" "gn"
      "gk" "go"
      "gl" "ge"
      ;;C-movement binds
      ))


  (add-hook 'evil-collection-setup-hook #'my-hjkl-rotation)
  (evil-collection-init)
#+END_SRC
** Mode Keybinds
*** Info
Prevent info mode from overwriting movement
#+BEGIN_SRC emacs-lisp
  (general-define-key :keymaps 'Info-mode-map "e" nil "i" nil)
#+END_SRC
*** Magit
Translate-key doesn't work on magit
Also want "l" to be log instead of ediff ("o")
#+BEGIN_SRC emacs-lisp
  (evil-collection-define-key 'normal 'magit-mode-map
    "n" #'magit-dispatch
    "e" #'magit-section-forward
    "i" #'magit-section-backward
    "o" #'magit-ediff-dwim

    "h" #'magit-gitignore
    "k" #'magit-reset-quickly
    "e" #'magit-section-forward
    "j" #'evil-search-next

    "gj" #'magit-jump-to-untracked

    "gn" #'magit-section-up
    "ge" #'magit-section-forward-sibling
    "gi" #'magit-section-backward-sibling)
#+END_SRC
*** Man
#+BEGIN_SRC emacs-lisp
  (evil-collection-define-key 'normal 'Man-mode-map
    "k" #'man-follow)
#+END_SRC

*** Langs
**** C
#+BEGIN_SRC emacs-lisp
  (general-define-key :states 'normal :keymaps 'c-mode-map
                      "gr" #'xref-find-references
                      "gD" #'xref-find-definitions-other-window)
#+END_SRC
**** Elisp
#+BEGIN_SRC emacs-lisp
  (general-define-key :modes 'normal :keymaps 'emacs-lisp-mode-map
                      "C-c C-j" #'imenu)
#+END_SRC

* Global keybinds
** Switch tabs
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x <C-left>") 'tab-previous)
  (global-set-key (kbd "C-x <C-right>") 'tab-next)
#+END_SRC
* Programs
Packages that offer a self contained experiance
*Guix Packages*
#+BEGIN_SRC lisp :noweb-ref packages
  "emacs-pdf-tools"

  "emacs-guix" ;; Curently broken
  "emacs-weechat"
  "emacs-emamux"
#+END_SRC
** Sbbs
#+BEGIN_SRC emacs-lisp
  (require 'sbbs)
  (define-key sbbs-read-mode-map (kbd "C-u")
    '(lambda () (interactive)
       (let ((thread-buf (current-buffer)))
         (sbbs-browse sbbs--board t)
         (kill-buffer thread-buf))))
#+END_SRC
*** Keybinds
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states 'normal :keymaps 'sbbs-read-mode-map
   "r" 'sbbs-read-reply
   "E" 'sbbs-read-next
   "I" 'sbbs-read-previous
   "o" 'sbbs-show-replies
   "n" 'sbbs-show-pop
   "N" 'sbbs-show-all
   "u" (lambda () (interactive)
         (let ((thread-buf (current-buffer)))
           (sbbs-browse sbbs--board t)
           (kill-buffer thread-buf))))

  (general-define-key
   :states 'normal :keymaps 'sbbs-view-mode-map
   "k" 'sbbs-view-open
   "RET" 'sbbs-view-open
   "c" 'sbbs-view-compose)
#+END_SRC
** Keepass
#+BEGIN_SRC emacs-lisp
  (require 'keepass-mode)
#+END_SRC
** Pdf tools
#+BEGIN_SRC emacs-lisp
  (require 'pdf-tools)
  (pdf-loader-install)
  (add-hook 'pdf-view-mode-hook #'pdf-view-midnight-minor-mode)
  ;;(add-hook 'pdf-view-mode-hook (lambda () (blink-cursor-mode -1)))
  ;;(add-hook 'pdf-view-mode-hook (lambda () (internal-show-cursor nil nil)))
#+END_SRC
** Pass
#+BEGIN_SRC emacs-lisp :noweb-ref leader-key
  "app" 'ivy-pass
  "api" 'password-store-insert
  "apg" 'password-store-generate
#+END_SRC
** Mpc
#+BEGIN_SRC emacs-lisp
  (general-define-key :states 'normal :keymaps 'mpc-mode-map
                      "RET" #'mpc-select-toggle
                      "q" #'mpc-quit
                      "p" #'mpc-toggle-play
                      "k" #'mpc-play-at-point)
#+END_SRC
** Guix
#+BEGIN_SRC emacs-lisp
  (require 'guix)
#+END_SRC
#+BEGIN_SRC emacs-lisp :noweb-ref leader-key
  "ag" #'guix
#+END_SRC
** Weechat
#+BEGIN_SRC emacs-lisp
  (require 'weechat)
  ;; (defcustom weechat-color-list '(unspecified "black" "dark gray" "dark red" "red"
  ;;                                             "dark green" "light green" "brown"
  ;;                                             "yellow" "dark blue" "light blue"
  ;;                                             "dark magenta" "magenta" "dark cyan"
  ;;                                             "light cyan" "gray" "white")
  (setq weechat-color-list '("black" "black" "dim gray" "dark red" "red"
                             "dark green" "green" "brown"
                             "orange" "dark blue" "blue"
                             "dark magenta" "magenta" "dark cyan"
                             "royal blue" "dark gray" "gray"))

  (weechat-connect "localhost" 9000 "2dLToM3HVaEpGaNT")
  (setq weechat-color-list (list 'unspecified s_base03 s_base01 s_red s_red
                                 s_green s_green s_base1
                                 s_orange s_blue s_blue
                                 s_violet s_magenta s_base1
                                 s_blue s_base1 s_base0))
#+END_SRC

#+BEGIN_SRC emacs-lisp :noweb-ref leader-key
  "awm" #'weechat-monitor-buffer
#+END_SRC
** Tmux
#+BEGIN_SRC emacs-lisp
  (require 'emamux)
#+END_SRC
** Elfeed
*Guix Packages*
#+BEGIN_SRC lisp :noweb-ref packages
  "emacs-elfeed"
  "emacs-elfeed-org"
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (require 'elfeed)
  (require 'elfeed-org)
#+END_SRC
 
#+BEGIN_SRC emacs-lisp
  (add-hook 'elfeed-search-mode-hook #'ne/visual-center-mode)
  (add-hook 'elfeed-show-mode-hook #'ne/visual-center-mode)
  (setq rmh-elfeed-org-files (list "~/dotfiles/elfeed.org"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(elfeed-feeds
     '("http://feeds.arstechnica.com/arstechnica/index"
       "https://graymirror.substack.com/feed"
       "https://karthinks.com/index.xml" "https://ambrevar.xyz/atom.xml"
       "https://www.youtube.com/channel/UCAiiOTio8Yu69c3XnR7nQBQ")))
#+END_SRC
** Info
#+BEGIN_SRC emacs-lisp
  (add-hook 'Info-mode-hook #'ne/visual-center-mode)
#+END_SRC


